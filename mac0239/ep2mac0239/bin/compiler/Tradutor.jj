options{  STATIC = false;}PARSER_BEGIN(Tradutor)package compiler;import java.io.*;import java.util.*;import java.util.Map.Entry;class Tradutor{  ArrayList < Clausula > clausulas;  TabelaVariaveis global;  public static void main(String [] args) throws ParseException, TokenMgrError  {    Tradutor parser = null;    try    {      parser = new Tradutor(new FileInputStream("/home/pedro/workspace/ep2mac0239/src/compiler/input.txt"));    }    catch (FileNotFoundException e)    {      // TODO Auto-generated catch block      e.printStackTrace();    }    parser.init();    parser.Start();    parser.printClausulas();    /*parser.printaDeclaracoes();*/  }  void init()  {    clausulas = new ArrayList < Clausula > ();    global = new TabelaVariaveis();  }  void printaDeclaracoes()  {	for (Entry<String, Incrementador> entry : global.getMap().entrySet()) {			String key = entry.getKey();			System.out.print(key+":");			System.out.print(global.getMap().get(key).getInicio());			System.out.println(" "+global.getMap().get(key).getInicio());					}	  }  void printClausulas()  {    for (Clausula c : clausulas)    {      c.print();    }  }}PARSER_END(Tradutor)SKIP :{  " "}SKIP :{  "\n"| "\r"| "\r\n"}TOKEN :{  < NUMBER : ([ "0"-"9" ])+ >}TOKEN :{  < VARIABLE : ([ "A"-"Z" ])+ >}TOKEN :{  < OPEN_PAR : "(" >}TOKEN :{  < CLOSE_PAR : ")" >}TOKEN :{  < OPERADOR :    "+"  | "-" >}TOKEN :{  < COMPARADOR :    "="  | "<"  | ">"  | "!=" >}TOKEN :{  < PREDID : ([ "a"-"z" ])+ >}void operacaoEsq(Restricao r) :{  Token t = null;  Token op = null;}{  t = < VARIABLE >  {    r.addEsq(t.image, "+");    System.out.print(t);  }  (    op = < OPERADOR >    {      System.out.print(op.image);    }    t = < VARIABLE >    {      r.addEsq(t.image, op.image);      System.out.print(t);    }  )*}void operacaoDir(Restricao r) :{  Token t = null;  Token op = null;}{  t = < VARIABLE >  {    r.addDir(t.image, "+");    System.out.print(t);  }  (    op = < OPERADOR >    {      System.out.print(op.image);    }    t = < VARIABLE >    {      if (t != null)      {        r.addDir(t.image, op.image);        System.out.print(t);      }    }  )*}void restricao(Clausula c) :{  Token t = null;  Restricao r;}{  {    r = new Restricao();    System.out.print(" ");  }  operacaoEsq(r) t = < COMPARADOR >  {    r.setComparador(t.image);    c.addRestricao(r);    System.out.print(" " + t + " ");  }  operacaoDir(r)}void argumento(Predicado p) :{  Token t, t2;  t2 = null;  Predicado pred = p;}{  t = < VARIABLE >  {    pred.addArg(t.image, global.getMap().get(t.image));    System.out.print(t);  }  (    "," t2 = < VARIABLE >    {      if (t2 != null)      {        p.addArg(t2.image, global.getMap().get(t2.image));        System.out.print("," + t2);      }    }  )*}void predicado(Clausula c) :{  Token t;  Predicado p;}{  < OPERADOR > t = < PREDID >  {    p = new Predicado(t.image);    p.setNegado(true);    c.addPredicado(p);    System.out.print("-" + t);  }  < OPEN_PAR >  {    System.out.print("(");  }  argumento(p)  {    System.out.print(") ");  }  < CLOSE_PAR >| t = < PREDID >  {    p = new Predicado(t.image);    c.addPredicado(p);    System.out.print(t);  }  < OPEN_PAR >  {    System.out.print("(");  }  argumento(p)  {    System.out.print(") ");  }  < CLOSE_PAR >}void clausula() :{  Clausula c = new Clausula();  clausulas.add(c);}{  predicado(c)  (    predicado(c)  )*  "."  {    System.out.print(".");  }  (    restricao(c)  )*  {    System.out.println();  }}void declaracao() :{  Token t, t1, t2;  String variable;}{  t = < VARIABLE >  {    System.out.print(t + ":");  }  ":" t1 = < NUMBER >  {    System.out.print(t1 + " ");  }  t2 = < NUMBER >  {    System.out.println(t2);  }  "."  {    Incrementador inc = new Incrementador(t.image, Integer.parseInt(t1.image), Integer.parseInt(t2.image));    global.addToTable(t.image, inc);  }}void Start() :{}{  (    declaracao()  )*  (    clausula()  )*  < EOF >}