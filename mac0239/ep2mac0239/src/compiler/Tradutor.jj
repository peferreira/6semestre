options{  STATIC = false;}PARSER_BEGIN(Tradutor)package compiler;import java.io.*;import java.util.*;import java.util.Map.Entry;class Tradutor{  ArrayList < Clausula > clausulas;  TabelaVariaveis global;  GeradorCnf gerCnf;  public static void main(String [] args) throws ParseException, TokenMgrError  {    String opcao = "", file = "";    Tradutor parser = null;    if (args.length > 0)    {      if (args.length == 1)      {        if (args [0].equals("-c"))        {          opcao = args [0];        }        else        {          file = args [0];        }      }      else if (args.length == 2)      {        opcao = args [0];        file = args [1];      }    }    if (!file.equals(""))    {      try      {        parser = new Tradutor(new FileInputStream(System.getProperty("user.dir") + "/src/compiler/" + file));      }      catch (FileNotFoundException e)      {        // TODO Auto-generated catch block        e.printStackTrace();      }    }    else    {      try      {        parser = new Tradutor(new FileInputStream(System.getProperty("user.dir") + "/src/compiler/input.txt"));      }      catch (FileNotFoundException e)      {        // TODO Auto-generated catch block        e.printStackTrace();      }    }    parser.init();    parser.Start();    if (opcao.equals("-c"))    {      parser.getGerCnf().setState(true);    }    parser.printClausulas();    /*parser.printaDeclaracoes();*/  }  GeradorCnf getGerCnf()  {    return gerCnf;  }  void init()  {    clausulas = new ArrayList < Clausula > ();    global = new TabelaVariaveis();    gerCnf = new GeradorCnf(clausulas);  }  void printaDeclaracoes()  {    for (Entry < String, Incrementador > entry : global.getMap().entrySet())    {      String key = entry.getKey();      System.out.print(key + ":");      System.out.print(global.getMap().get(key).getInicio());      System.out.println(" " + global.getMap().get(key).getInicio());    }  }  void printClausulas()  {    for (Clausula c : clausulas)    {      c.print();    }  }}PARSER_END(Tradutor)SKIP :{  " "}SKIP :{  "\n"| "\r"| "\r\n"}TOKEN :{  < NUMBER : ([ "0"-"9" ])+ >}TOKEN :{  < VARIABLE : ([ "A"-"Z" ])+ >}TOKEN :{  < OPEN_PAR : "(" >}TOKEN :{  < CLOSE_PAR : ")" >}TOKEN :{  < OPERADOR :    "+"  | "-" >}TOKEN :{  < COMPARADOR :    "="  | "<"  | ">"  | "!=" >}TOKEN :{  < PREDID : ([ "a"-"z" ])+ >}/*void operacao(Restricao r, String dir) :{  Token t = null;  Token op = null;}{  t = < VARIABLE >  {    r.addRestricao(t.image, "+",dir);  }  (    op = < OPERADOR >    {}    t = < VARIABLE >    {      r.addRestricao(t.image, op.image,dir);    }  )*}*/void operacao(Restricao r, String dir) :{  Token t = null;  Token op = null;}{  t = < VARIABLE >  {    r.addRestricao(t.image, "+", dir);  }  (    LOOKAHEAD(2)    op = < OPERADOR >    {}    t = < VARIABLE >    {      r.addRestricao(t.image, op.image, dir);    }  )*}void restricao(Clausula c) :{  Token t = null;  Restricao r;}{  {    r = new Restricao();    /*System.out.print(" ");*/  }  operacao(r, "esq") t = < COMPARADOR >  {    r.setComparador(t.image);    c.addRestricao(r);    /*System.out.print(" " + t + " ");*/  }  operacao(r, "dir")}void argumento(Predicado p) :{  Token t, t2;  t2 = null;  Predicado pred = p;}{  t = < VARIABLE >  {    pred.addArg(t.image, global.getMap().get(t.image));    /*System.out.print(t);*/  }  (    "," t2 = < VARIABLE >    {      if (t2 != null)      {        p.addArg(t2.image, global.getMap().get(t2.image));        /*System.out.print("," + t2);*/      }    }  )*}void predicado(Clausula c) :{  Token t;  Predicado p;}{  < OPERADOR > t = < PREDID >  {    p = new Predicado(t.image);    p.setNegado(true);    c.addPredicado(p);    /*System.out.print("-" + t);*/  }  < OPEN_PAR >  { /*System.out.print("(");*/}  argumento(p)  { /*System.out.print(") ");*/}  < CLOSE_PAR >| t = < PREDID >  {    p = new Predicado(t.image);    c.addPredicado(p);    /*System.out.print(t);*/  }  < OPEN_PAR >  { /*System.out.print("(");*/}  argumento(p)  { /*System.out.print(") ");*/}  < CLOSE_PAR >}void clausula() :{  Clausula c = new Clausula(gerCnf);  clausulas.add(c);}{  predicado(c)  (    predicado(c)  )*  "."  { /*System.out.print(".");*/}  (    restricao(c)  )*  { /*System.out.println();*/}}void declaracao() :{  Token t, t1, t2;}{  t = < VARIABLE >  { /*System.out.print(t + ":");*/}  ":" t1 = < NUMBER >  { /*System.out.print(t1 + " ");*/}  t2 = < NUMBER >  { /*System.out.println(t2);*/}  "."  {    Incrementador inc = new Incrementador(t.image, Integer.parseInt(t1.image), Integer.parseInt(t2.image));    global.addToTable(t.image, inc);  }}void Start() :{}{  (    declaracao()  )*  (    clausula()  )*  < EOF >}